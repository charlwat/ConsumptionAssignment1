% This test file was generated by Copilot. Validate generated output before use.
classdef VFI_Assignment_Test < matlab.unittest.TestCase
    methods(Test)
        function testUtilityFunction(testCase)
            c = 10;
            gamma = 1.3;
            expectedUtility = (c^(1-gamma)) / (1-gamma);
            utility = @(c) (c.^(1-gamma)) ./ (1-gamma);
            actualUtility = utility(c);

            testCase.verifyEqual(actualUtility, expectedUtility, 'AbsTol', 1e-10);
        end

        function testValueFunctionIteration(testCase)
            a_grid = linspace(0, 50, 100);
            y_grid = linspace(0, 10, 7);
            y_trans = rand(7); % Placeholder for actual transition matrix
            beta = 0.96; r = 0.04;
            utility = @(c) log(c); % Simplified utility for testing
            tol = 1e-9; max_iter = 1000;

            [V, policy_a, policy_c, iter] = solve_vfi(a_grid, y_grid, y_trans, beta, r, utility, tol, max_iter);

            testCase.verifySize(V, size(a_grid), 'Value function size mismatch');
            testCase.verifySize(policy_a, size(a_grid), 'Policy a size mismatch');
            testCase.verifySize(policy_c, size(a_grid), 'Policy c size mismatch');
            testCase.verifyLessThanOrEqual(iter, max_iter, 'Exceeded maximum iterations');
        end

        function testSimulationOutput(testCase)
            policy_a = rand(100, 1); % Placeholder for actual policy
            policy_c = rand(100, 1); % Placeholder for actual policy
            a_grid = linspace(0, 50, 100);
            y_grid = linspace(0, 10, 7);
            y_trans = rand(7); % Placeholder for actual transition matrix
            rho = 0.9; sigma = 0.04; T_sim = 1000; T_burn = 500;

            [y_sim, a_sim, c_sim, s_sim, exp_y_sim, epsilon_sim, Delta_c_sim] = ...
                run_simulation(policy_a, policy_c, a_grid, y_grid, y_trans, rho, sigma, T_sim, T_burn);

            testCase.verifySize(y_sim, [T_sim, 1], 'y_sim size mismatch');
            testCase.verifySize(a_sim, [T_sim, 1], 'a_sim size mismatch');
            testCase.verifySize(c_sim, [T_sim, 1], 'c_sim size mismatch');
        end
    end
end